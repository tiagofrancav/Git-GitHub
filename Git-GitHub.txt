05/09/2025 - praticando para aperfeiçoar minhas tecnicas com git. 

Olá, este diretório é dedicado as aulas de Git, coordenado pelo professor Bruno Costa, faculdade laboro.

Configuração incial
   
    git config --global user.name "Seu nome": Define o nome do usuário que fará os commints.
    git config --global user.email "seuemail@exemplo.com": Define o e-mail associado aos commits.

Iniciando um repositório

    git init: Cria um novo repositório git vazio diretório atual.
    git clone -URL do repositório-: Baixa uma cópia de um repositório git existente para o seu computador.

Gerenciando alterações

    git status: Mostra o estado atual do repositório, incluindo arquivos modificados
    git add -arquivo-: Adiciona alterações de arquivos para a área de preparação (stage) para o próximo commit. Use git add . para adicionar todos os arquivos modificados.
    git commit -m "Mensagem descritica do commit": Confirma as alterações preparadas no repositório local, com uma mensagem que descreve o que foi feito.

Histórico de commits

    git log: Exibe o histórico de commits de repositório.

Trabalhando com repositório remoto

    git add remote origin: adiciona um repositório remoto (geralmente chamado de origin)
        git remote -v: Verifica se houve a conexão
    git push origin -nome_da_brach- -u (master ou main, geralmente é master): Envia suas alterações locais para o repositório remoto. (branch = ramificação)
    git pull origin -nome_da_branch- (master ou main, geralmente é master): Busca e mescla as alterações do repositório remoto para seu repositório local.    

Histórico de commits
    
    git log: Exibe o histórico completo usuario, data...
    git log --oneline: Exibe a forma simplificada com o nome e o codigo do commit somente

Fluxograma Git + GitHub ASCII

      
 [Usuário 1] ---> [ Computador 1 ] ---> [ Repositório Local 1 ]
                                                               \
                                                                \
 [Usuário 2] ---> [ Computador 2 ] ---> [ Repositório Local 2 ] ---> [ Repositório Remoto ]
                                                                /        (GitHub)
                                                               /
 [Usuário 3] ---> [ Computador 3 ] ---> [ Repositório Local 3 ]
                                                (git)


                          (push) -------------->
                          <-------------- (pull)

Explicação

Usuário (desenvolvedor)

    Cada pessoa desenvolvedora escreve e edita o código no seu computador local.
    Essas mudanças ficam primeiro só na máquina dela.

Computador → Repositório Local

    O computador tem um repositório Git local (a pasta do projeto iniciada com git init ou clonada do GitHub).
    Ali dentro o desenvolvedor cria commits, que são como “fotos” do estado do código ao longo do tempo.

Repositórios Locais → Repositório Remoto (GitHub)

    Quando querem compartilhar as mudanças com o time, os devs enviam (com git push) suas alterações para o repositório remoto no GitHub.
    Esse remoto funciona como a versão centralizada do projeto.

Sincronização entre Devs (push/pull)
    
    Se outro desenvolvedor já fez mudanças no GitHub, o colega precisa trazer essas alterações para o seu repositório local usando git pull.
    Assim todos ficam trabalhando sempre na versão mais atualizada.

Ciclo contínuo
    
    O processo se repete: cada dev altera → commita → faz push → outros dão pull → continuam desenvolvendo.
    Isso garante colaboração, histórico de alterações e segurança no código.

Resumindo:

Local = onde o dev trabalha e guarda sua cópia.
Remoto (GitHub) = ponto central onde todos compartilham e sincronizam o código.
Push = envia alterações para o remoto.
Pull ou fetch = puxa alterações do remoto.



